"import warnings\nimport Bio.PDB\nfrom Bio.PDB.StructureBuilder import PDBConstructionWarning\nwarnings.simplefilter('ignore', PDBConstructionWarning)\nfrom io import StringIO\nimport numpy as np\n\natomic_dtype = [\n    (\"model\", 'uint16'),            \n    (\"hetero\", \"S1\"),\n    (\"name\", \"S4\"),\n    (\"altloc\",\"S1\"),\n    (\"resname\", \"S3\"),            \n    (\"chain\",\"S1\"),\n    (\"index\", 'uint32'),\n    (\"icode\", \"S1\"), \n    (\"resid\", 'uint16'),            \n    (\"x\", 'float32'),\n    (\"y\", 'float32'),\n    (\"z\", 'float32'),\n    (\"occupancy\", 'float32'),\n    (\"bfactor\", 'float32'),\n    (\"segid\", \"S4\"),\n    (\"element\", \"S2\")                  \n]\n\natomic_dtype = np.dtype(atomic_dtype, align=True)\n\ndef parse_pdb(pdbdata):\n    \n    pdb_obj = StringIO(pdbdata)\n    \n    p = Bio.PDB.PDBParser()\n    struc = p.get_structure(\"PDB\", pdb_obj)\n    natoms = len(list(struc.get_atoms()))        \n    atomstate = np.zeros(natoms,dtype=atomic_dtype)\n    \n    a = atomstate\n    count = 0\n    for modelnr, model in enumerate(struc.get_models()):\n        atomlist = list(model.get_atoms())\n        atomlist.sort(key=lambda atom: atom.serial_number)\n        for atom in atomlist:\n            residue = atom.get_parent()\n            hetero, resid, icode = residue.get_id()\n            segid = residue.segid\n            resname = residue.resname\n            chainid = residue.get_parent().id\n            aa = a[count]\n            aa[\"model\"] = modelnr + 1\n            aa[\"hetero\"] = hetero\n            aa[\"name\"] = atom.name\n            aa[\"altloc\"] = atom.altloc\n            aa[\"resname\"] = resname\n            aa[\"chain\"] = chainid\n            aa[\"index\"] = atom.serial_number\n            aa[\"icode\"] = icode\n            aa[\"resid\"] = resid\n            aa[\"x\"] = atom.coord[0]\n            aa[\"y\"] = atom.coord[1]\n            aa[\"z\"] = atom.coord[2]\n            occ = atom.occupancy\n            if occ is None or occ < 0:\n                occ = 0\n            aa[\"occupancy\"] = occ\n            aa[\"segid\"] = segid\n            aa[\"element\"] = atom.element\n            count += 1\n    return atomstate\n\nif __name__ == \"__main__\":\n    import sys\n    pdbfile = sys.argv[1]\n    outfile = sys.argv[2]\n    data = parse_pdb(open(pdbfile).read())\n    np.save(outfile, data, allow_pickle=False)"
