{
  "INDEX.jinja.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{{title}}</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/buefy/dist/buefy.min.css\">\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900'>\n    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css'>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Material+Icons'>\n    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/vuetify@2.3.20/dist/vuetify.min.css'>\n    <link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.0.6/css/all.css'>\n</head>\n\n<body>\n    <div id=\"app\">\n        <v-app id=\"vuetify-app\">\n{{COMPONENTS}}\n        </v-app>\n    </div>\n\n    <script src='https://cdn.jsdelivr.net/npm/babel-polyfill/dist/polyfill.min.js'></script>\n    <script src='https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js'></script>\n    <script src='https://cdn.jsdelivr.net/npm/vuetify@2.3.20/dist/vuetify.min.js'></script>\n    <script src=\"https://unpkg.com/buefy/dist/buefy.min.js\"></script>\n    <script type=\"text/javascript\" src=\"./seamless-client.js\"></script>\n    <script type=\"text/javascript\" src=\"./index.js\"></script>\n</body>\n</html>\n",
  "INDEX.jinja.js": "app_globals = {}\n\n{{ COMPONENT_JS }}\n\nseamless_read_cells = {{ SEAMLESS_READ_CELLS }}\nseamless_write_cells = {{ SEAMLESS_WRITE_CELLS }}\nseamless_auto_read_cells = {{ SEAMLESS_AUTO_READ_CELLS }}\n\nctx = connect_seamless()\nctx.self.onsharelist = function (sharelist) {\n  sharelist.forEach(cell => {\n    if (ctx[cell].binary) {\n      ctx[cell].onchange = function () {\n        content_type = ctx[cell].content_type\n        if (content_type === null) content_type = \"\"\n        const v = new Blob([this.value], {type: content_type})\n        vm[cell].value = v\n        vm[cell].checksum = this.checksum\n      }\n    }\n    else if (seamless_read_cells[\"json\"].indexOf(cell) >= 0) {\n      ctx[cell].onchange = function () {\n        try {\n          const v = JSON.parse(this.value)\n          vm[cell].value = v\n          vm[cell].checksum = this.checksum\n        }\n        catch (error) {\n          console.log(`Cannot parse server value of cell '${cell}' as JSON`)\n        }\n      }\n    }\n    else if (seamless_read_cells[\"text\"].indexOf(cell) >= 0) {\n      ctx[cell].onchange = function () {\n        vm[cell].value = this.value\n        vm[cell].checksum = this.checksum\n      }\n    }\n\n    if (seamless_auto_read_cells.indexOf(cell) >= 0) {\n      ctx[cell].auto_read = true\n    }\n  })\n}\nwebctx = connect_seamless(null, null, share_namespace=\"status\")\nwebctx.self.onsharelist = function (sharelist) {\n  vis_status = webctx[\"vis_status\"]\n  if (!(vis_status === undefined)) {\n    vis_status.onchange = function() {      \n      let jstatus = JSON.parse(vis_status.value)\n      cells = {}\n      transformers = {}\n      jstatus.nodes.forEach(node => {\n        if (node.type == \"cell\") {\n          cells[node.name] = node\n        }\n        else if (node.type == \"transformer\") {\n          transformers[node.name] = node\n        }\n      })\n      jstatus.cells = cells\n      jstatus.transformers = transformers\n      vm[\"STATUS\"].value = jstatus\n      vm[\"STATUS\"].checksum = vis_status.checksum\n    }\n  }\n}  \n\nfunction seamless_update(cell, value, encoding) {\n  if (!ctx) return\n  if (!ctx.self.sharelist) return\n  if (ctx.self.sharelist.indexOf(cell) < 0) return\n  if (ctx[cell].binary) {\n    ctx[cell].set(value)\n  }\n  else if (encoding == \"json\") {\n    ctx[cell].set(JSON.stringify(value))\n  }\n  else if (encoding == \"text\") {\n    ctx[cell].set(value)\n  }\n}\n\n\nconst app = new Vue({\n  vuetify: new Vuetify(),\n  data() {\n    return {\n      ...{{ VUE_DATA }}, \n      ...{\n        \"STATUS\": {\n          \"checksum\": null,\n          \"value\": {}\n        }\n      }\n    }\n  },\n  methods: {\n    METHOD_get_app_globals() {\n      return app_globals\n    },\n    METHOD_file_upload(cellname, file) { \n      if (file === undefined) return\n      that = this\n      file.arrayBuffer().then(function(buf){\n        that[cellname].value = new Blob([new Uint8Array(buf)], {type: file.type })\n      })  \n    }\n    \n  },\n  watch: {\n    {{WATCHERS}}\n  },\n})\n\nvm = app.$mount('#app')\n",
  "card.README.txt": "Text area, cannot be edited.\n\nParameters:\n- title (string).\n",
  "card.jinja.html": "            <section>\n\n                <b-collapse class=\"card\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                    <div\n                        slot=\"trigger\"\n                        slot-scope=\"props\"\n                        class=\"card-header\"\n                        role=\"button\"\n                        aria-controls=\"{{ID1}}\">\n                        <p class=\"card-header-title\">\n                            {{title}}\n                        </p>\n                        <a class=\"card-header-icon\">\n                            <b-icon\n                                :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                            </b-icon>\n                        </a>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"content\" style=\"overflow: auto; height: 400px;\">\n                            <pre>{{ '{{' }} {{CELL}}.value {{ '}}' }}</pre>\n                        </div>\n                    </div>\n                </b-collapse>\n\n            </section>\n",
  "datatable.README.txt": "Data table (Vuetify) to visualize a plain cell.\n\nThe visualized cell must contain a dict with the following keys:\n\n\"headers\": a description of the data columns, as a list-of-dicts.\nSee https://vuetifyjs.com/en/api/v-data-table/#headers\n for a description of an individual dict (DataTableHeader)\nExample: [{\"value\": \"a\", \"text\": \"Field A\"}, {\"value\": \"b\", \"text\": \"Field B\"}]\n\n\"items\": the data to display, as a list-of-dicts.\nEach dict must contain a key corresponding to \"value\"\n in one of the header dicts.\nExample: [{\"a\": 1, \"b\": \"one\"}, {\"a\": 2, \"b\": \"two\"}]\n\nParameters:\n- title (string).\n",
  "datatable.jinja.html": "            <section>\n                <b-field label=\"{{title}}\">\n                <v-data-table\n                  :headers=\"{{CELL}}.value.headers\"\n                  :items=\"{{CELL}}.value.items\"\n\n                  class=\"elevation-1\"\n                >\n                  <template v-slot:item=\"{ item }\">\n                    <tr>\n                        <td v-for=\"header in {{CELL}}.value.headers\">\n                          {{ '{{' }} item[header.value] {{ '}}' }}\n                        </td>\n                    </tr>\n                  </template>\n                </v-data-table>\n                </b-field>\n              </section>\n",
  "fileupload.jinja.html": "        <section>\n            <b-field label=\"{{title}}\">                    \n            </b-field>\n            <b-field class=\"file is-primary\" :class=\"{'has-name': !!{{CELL}}.file}\">\n                <b-upload \n                    v-model=\"{{CELL}}.file\" \n                    class=\"file-label\"\n                >\n                    <span class=\"file-cta\">\n                        <b-icon class=\"file-icon\" icon=\"upload\"></b-icon>\n                        <span class=\"file-label\">Click to upload</span>\n                    </span>\n                    <span class=\"file-name\" v-if=\"{{CELL}}.file\">\n                        {{ '{{' }} {{CELL}}.file.name {{ '}}' }}\n                    </span>\n                </b-upload>\n            </b-field>\n        </section>\n",
  "fileupload.json": "{\n    \"file\": true\n}\n",
  "html.README.txt": "Field to display a HTML cell\n\nParameters:\n- title (string).\n",
  "html.jinja.html": "            <b-field label=\"{{title}}\">\n                <div v-html=\"{{CELL}}.value\"></div>\n            </b-field>\n",
  "iframe.README.txt": "Field to display a HTML cell using an iframe\n\nParameters:\n- title (string).\n- height (CSS unit string)\n",
  "iframe.jinja.html": "            <b-field label=\"{{title}}\">\n                <iframe src=\"../ctx/{{CELL}}\" width=100% height={{height}} :key=\"'{{ID1}}' + {{CELL}}.checksum\"></iframe>\n            </b-field>\n",
  "image.README.txt": "Field to display an image\nThis will only work for binary cells, because those are stored as Blob with the correct mimetype\n\nParameters:\n- title (string).\n- width (CSS unit string)\n- height (CSS unit string)\n",
  "image.jinja.html": "            <b-field label=\"{{title}}\">                \n                <img :src=\"{{CELL}}.value ? METHOD_get_app_globals().createObjectURL({{CELL}}.value) : ''\" width={{width}} height={{height}}></img>\n            </b-field>\n",
  "image.js": "app_globals.createObjectURL = URL.createObjectURL\n",
  "input.README.txt": "Input for strings\n\nParameters:\n- title (string).\n- editable (bool). If true, the number input is editable\n",
  "input.jinja.html": "            <b-field label=\"{{title}}\">\n                <b-input\n                    v-bind:value=\"{{CELL}}.value\"\n                    v-model=\"{{CELL}}.value\"\n                    :editable=\"{% if editable %}true{% else %}false{% endif %}\"\n                />\n            </b-field>\n",
  "numberinput.README.txt": "Number input for integers.\n\nParameters:\n- title (string).\n- editable (bool). If true, the number input is editable\n",
  "numberinput.jinja.html": "            <b-field label=\"{{title}}\">\n                <b-numberinput\n                    v-bind:value=\"{{CELL}}.value\"\n                    v-model=\"{{CELL}}.value\"\n                    :editable=\"{% if editable %}true{% else %}false{% endif %}\"\n                />\n            </b-field>\n",
  "slider.README.txt": "Slider for integers and floats\n\nParameters:\n- title (string).\n- min (float). Minimum value.\n- max (float). Maximum value.\n",
  "slider.jinja.html": "            <section>\n                <b-collapse class=\"card\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                    <div\n                        slot=\"trigger\"\n                        slot-scope=\"props\"\n                        class=\"card-header\"\n                        role=\"button\"\n                        aria-controls=\"{{ID1}}\">\n                        <p class=\"card-header-title\">\n                            {{title}}\n                        </p>\n                        <a class=\"card-header-icon\">\n                            <b-icon\n                                :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                            </b-icon>\n                        </a>\n                    </div>\n                    <div class=\"card-content\">\n                        <div class=\"content\">\n                            <b-field grouped>\n                                <b-input :value=\"{{CELL}}.value\" v-model.number=\"{{CELL}}.value\" type=\"number\"></b-input>\n                            </b-field>\n                            <b-field>\n                                <b-slider :value=\"{{CELL}}.value\" v-model=\"{{CELL}}.value\" :min=\"{{min}}\" :max=\"{{max}}\" lazy></b-slider>\n                            </b-field>\n                        </div>\n                    </div>\n                </b-collapse>\n\n            </section>\n",
  "transformer-status.jinja.html": "        <section v-if=\"STATUS.value.transformers\">\n            <b-field label=\"{{title}}\">>                 \n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'royalblue'\"\n                pack=\"fa\"\n                icon=\"circle\"\n                size=\"is-large\"\n                type=\"is-info\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'forestgreen'\"\n                pack=\"fas\"\n                icon=\"sync-alt\"\n                size=\"is-large\"\n                custom-class=\"fa-spin\"\n                type=\"is-success\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'yellow'\"\n                pack=\"fa\"\n                icon=\"sync-alt\"\n                size=\"is-large\"\n                custom-class=\"fa-spin\"\n                type=\"is-warning\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'orange'\"\n                pack=\"fa\"\n                icon=\"circle\"\n                size=\"is-large\"\n                type=\"is-danger\">\n            </b-icon>\n            <b-icon\n                v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.color == 'red'\"\n                pack=\"fa\"\n                icon=\"circle\"\n                size=\"is-large\"\n                type=\"is-danger\">\n            </b-icon>\n            </b-field>\n            <b-collapse class=\"card\" :open=\"false\" animation=\"slide\" aria-id=\"{{ID1}}\">\n                <div\n                    v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.status\"\n                    slot=\"trigger\"\n                    slot-scope=\"props\"\n                    class=\"card-header\"\n                    role=\"button\"\n                    aria-controls=\"{{ID1}}\">\n                    <p class=\"card-header-title\">\n                        Error message\n                    </p>\n                    <a class=\"card-header-icon\">\n                        <b-icon\n                            :icon=\"props.open ? 'menu-down' : 'menu-up'\">\n                        </b-icon>\n                    </a>\n                </div>\n                <div class=\"card-content\" v-if=\"STATUS.value.transformers.{{TRANSFORMER}}.status\">\n                    <div class=\"content\" style=\"overflow: auto; height: 400px;\">\n                        <pre>{{ '{{' }} STATUS.value.transformers.{{TRANSFORMER}}.status {{ '}}' }}</pre>\n                    </div>\n                </div>\n            </b-collapse>\n\n        </section>\n"
}
